Matrices
#include<iostream>
#include<conio.h>
#include<string.h>
#include<ctype.h>
#include<iomanip>
#define fil 10
#define col 10
usingnamespace std;
float determinante(float Mat[fil][col],int n, int m);

void cargar(int mat[fil][col], int nfil, int ncol){
int i, j;
	cout<<endl;
for(i=0;i<nfil;i++){
for(j=0;j<ncol;j++){
            cout<<"Introducir elemento ["<<i<<","<<j<<"]: ";
            cin>>mat[i][j];
        }
    }
} 

void mostrar(int mat[fil][col], int nfil, int ncol){
int i, j;
	cout<<endl;
for(i=0;i<nfil;i++){
for(j=0;j<ncol;j++){
            cout<<mat[i][j]<<" ";
        }
    cout<<endl;
    }
} 

void vector(int mat[fil][col], int nfil, int ncol, int vec[], int&k){
	int i, j;
	k=0;
	for(i=0;i<nfil;i++){
		for(j=0;j<ncol;j++){
			vec[k]=mat[i][j];
                k++;
		}
	}
}

void transpuesta(int mat[fil][col], int&nfil, int&ncol){
	int i, j, vec[50], k, aux;
	vector(mat,nfil,ncol,vec,k);
	k=0;
	for(i=0;i<nfil;i++){
for(j=0;j<ncol;j++){
            mat[j][i]=vec[k];
			k++;
		}
	}
	aux=nfil;
	nfil=ncol;
	ncol=aux;
}

void sumar(int mat1[fil][col],int mat2[fil][col],int mat3[fil][col], int nfil, int ncol){
	int i, j;
	for(i=0;i<nfil;i++){
		for(j=0;j<ncol;j++){
			mat3[i][j]=mat1[i][j]+mat2[i][j];
		}
	}
}

void multiplicar(int mat1[fil][col],int mat2[fil][col],int mat3[fil][col], int nfil1, int ncol1, int nfil2, int ncol2){
	int i, j, a, b, resultado;
	for(i=0;i<nfil1;i++){
		for(j=0;j<ncol2;j++){
			resultado=0;
			for(a=0;a<ncol1;a++){
					resultado=resultado+(mat1[i][a]*mat2[a][j]);
				}
				mat3[i][j]=resultado;
			}
		}
}

void mostrarVec(int vec[], int n){
int i;
    cout<<endl<<endl<<"vector: "<<endl;
for(i=0;i<n;i++){
        cout<<vec[i]<<" ";
    }
}

bool verifPrimos(int n){
int i;
bool k = true;
for(i=2;i<n;i++){
if(n%i==0){
            k=false;
        }
    }
return(k);
}

void vecNoPrimos(int mat[fil][col], int nfil, int ncol, int vec[], int&k){
int i, j;
    k=0;
for(i=0;i<nfil;i++){
for(j=0;j<ncol;j++){
if(verifPrimos(mat[i][j])==false){
                vec[k]=mat[i][j];
                k++;
}
        }
    }
}

void eliminarRepetidos(int vec[], int&n){
int i,j,k;
for(i=0;i<n;i++){
for(j=i+1;j<n;j++){
if(vec[i]==vec[j]){
for(k=j;k<n-1;k++){
                    vec[k]=vec[k+1];
                }
                n--;
                i--;
            }
        }
    }
}

void ordenar(int vec[], int&n){
int i, j, aux;
for(i=0;i<n;i++){
for(j=i+1;j<n;j++){
if(vec[i]>vec[j]){
                aux=vec[i];
                vec[i]=vec[j];
                vec[j]=aux;
            }
        }
    }
}

void cargarXYZ(int mat[fil][col], int n, int m){
int i, a,c=1;
    a=0;
for(a=0;a<n;a++){
for(i=a;i<n-a;i++){
            mat[a][i]=c++;
        }
for(i=a+1;i<n-a;i++){
            mat[i][n-a-1]=c++;
        }
for(i=n-a-1;i>=a;i++){
            mat[n-a-1][i]=c++;
        }
for(i=a;i<n-a;i++){
            mat[i][a]=c++;
        }
    }
if(n%2!=0){
        mat[(n-1)/2][(n-1)/2]=c;
    }
}

bool cuadradomagico(int mat[fil][col],int n)
{	int s=0,aux=0;
	for(int i=0;i<n;i++)
	{
		s=s+mat[0][i];
	}
	for(int i=0;i<n;i++)
	{
		aux=0;
		for(int j=0;j<n;j++)
		{
			aux=aux+mat[i][j];
		}
		if(aux!=s)
		{
			returnfalse;
		}
	}
	for(int i=0;i<n;i++)
	{
		aux=0;
		for(int j=0;j<n;j++)
		{
			aux=aux+mat[j][i];
		}
		if(aux!=s)
		{
			returnfalse;
		}
	}
	aux=0;
	for(int i=0;i<n;i++)
	{
		aux=aux+mat[i][i];
	}
	if(aux!=s)
	{
		returnfalse;
	}
	else
	{
		returntrue;
	}
}

void caracol(int m[fil][col], int n){
	int i, j, c = 1;
	for (i = 0; i < n / 2; i++){
		for (j = i; j < n - i; j++){
			m[i][j] = c;
			c++;
		}
		for (j = i; j < n - 1-i; j++){
			m[j+1][n-1 - i] = c;
			c++;
		}
		c--;
		for (j = n - 1 - i; j > i; j--){
			m[n-1-i][j] = c;
			c++;
		}
		for (j = n - 1 - i; j > i; j--){
			m[j][i] = c;
			c++;
		}
	}
	if (n % 2 != 0){
		m[n / 2][n / 2] = n*n;
	}
}

void cargar1(float M[fil][col],int n,int m){
	int i, j;
for(i=0;i<n;i++)
    {
for(j=0;j<m;j++){
			cout<<"Introducir elemento ["<<i<<","<<j<<"]: ";
            cin>>M[i][j];
		}
    }
}
void mostrar1(float M[fil][col],int n,int m){
	int i,j;
	cout<<endl;
for(i=0;i<n;i++)
    {
for(j=0;j<m;j++){
            cout<< setw(4) <<M[i][j]<<"    ";
        cout<<" ";
		}
		cout<<endl;
    }
}

float cofactor(float Mat[fil][col],int a,int b,int n,int m)
{
	if(n>1)
		{
		float A[fil][col];
		int c=0,d=0;
		for(int i=0;i<n;i++)
		{
			if(i!=a)
			{
				d=0;
				for (int j=0;j<m;j++)
				{
					if(j!=b)
					{
						A[c][d]=Mat[i][j];
						d++;
					}
				}
				c++;
			}
		}

			return (determinante(A,n-1,n-1)*( powf(-1,a+b+2) ));
	}
	else
return 1;
}
float determinante(float Mat[fil][col],int n, int m)
{
int i;
float d=0;
for(i=0;i<m;i++)
    {
        d=d+(( Mat[0][i] )*( cofactor(Mat,0,i,n,m) ));
    }
return d;
}
void matrizcofactores(float M[fil][col],float C[fil][col],int n,int m)
{
int i,j;
for(i=0;i<n;i++)
    {
for(j=0;j<m;j++)
            C[i][j]=cofactor(M,i,j,n,m);
    }
}
void traspuesta(float M[fil][col],float T[fil][col],int n,int m)
{
int i,j;
for(i=0;i<n;i++)
    {
for(j=0;j<m;j++)
            T[i][j]=M[j][i];
    }
}
void inversa(float T[fil][col],float I[fil][col],int n,int m,float d)
{
int i,j;
for(i=0;i<n;i++)
    {
for(j=0;j<m;j++)
            I[i][j]=T[i][j]/d;
    }
}
void mult(float A[fil][col],float B[fil][col],float C[fil][col],int n, int m,int o)
{
int i,j;
float a=1,d;
for(i=0;i<n;i++)
    {
for(j=0;j<o;j++)
        {
            a=0;
for(int k=0;k<m;k++)
                a=a+A[i][k]*B[k][j];
            d=a;
if( a-d<0.5 )
                C[i][j]=d;
else
                C[i][j]=d+1;
        }
    }
}

int main(){
	int opcion,c;
	int matriz1[fil][col], matriz2[fil][col], matriz3[fil][col], n, m,vec[50], k,o,p;
	float M[fil][col],C[fil][col],d,T[fil][col],I[fil][col];
float X[fil][col];

		do{
		system("cls");
		cout<<"******* M E N U *********";
		cout<<endl<<"1.- Matriz transpuesta";
		cout<<endl<<"2.- Matriz inversa";
		cout<<endl<<"3.- Suma de 2 matrices";
		cout<<endl<<"4.- Multiplicacion de 2 matrices";
		cout<<endl<<"5.- Verificar si una matriz es magica";
		cout<<endl<<"6.- Cargar una matriz cuadrada de forma circular con los primeros números naturales";
	//	cout<<endl<<"7.- Cargar una matriz cuadrada por diagonales con los primeros números naturales";
		cout<<endl<<"0.- Salir";
		cout<<endl<<"Seleccionar opcion: ";
		cin >> opcion;
		getchar();
		switch(opcion){
			case 1: cout<<"Introducir nro de filas: ";
					cin>>n;
					cout<<"Introducir nro de columnas: ";
					cin>>m;
					cargar(matriz1,n,m);
					cout<<"Matriz: ";
					mostrar(matriz1,n,m);
					transpuesta(matriz1,n,m);
					cout<<"Matriz transpuesta: ";
					mostrar(matriz1,n,m);
					getch();
					break;
			case 2: cout<<"Introducir nro de filas: ";
					cin>>n;
					cout<<"Introducir nro de columnas: ";
					cin>>m;
					cargar1(M,n,m);
					cout<<"La matriz es: ";
					mostrar1(M,n,m);
					d=determinante(M,n,m);
					matrizcofactores(M,C,n,m);
					traspuesta(C,T,n,m);
					inversa(T,I,n,m,d);
					cout<<"La matriz inversa es: ";
					mostrar1(I,n,m);
					getch();
					break;
			case 3: cout<<"Introducir nro de filas: ";
					cin>>n;
					cout<<"Introducir nro de columnas: ";
					cin>>m;
					cout<<"Introducir matriz 1: ";
					cargar(matriz1,n,m);
					cout<<"Introducir matriz 2: ";
					cargar(matriz2,n,m);
					sumar(matriz1,matriz2,matriz3,n,m);
					cout<<"Matriz 1: ";
					mostrar(matriz1,n,m);
					cout<<"Matriz 2: ";
					mostrar(matriz2,n,m);
					cout<<"Matriz resultante: ";
					mostrar(matriz3,n,m);
					getch();
					break;
			case 4: cout<<"Introducir nro de filas: ";
					cin>>n;
					cout<<"Introducir nro de columnas: ";
					cin>>m;
					cout<<"Introducir matriz 1: ";
					cargar(matriz1,n,m);
					cout<<"Introducir nro de filas: ";
					cin>>o;
					cout<<"Introducir nro de columnas: ";
					cin>>p;
					cout<<"Introducir matriz 2: ";
					cargar(matriz2,o,p);
					multiplicar(matriz1,matriz2,matriz3,n,m,o,p);
					cout<<"Matriz 1: ";
					mostrar(matriz1,n,m);
					cout<<"Matriz 2: ";
					mostrar(matriz2,o,p);
					cout<<"Matriz resultante: ";
					mostrar(matriz3,n,p);
					getch();
					break;
			case 5: cout<<"Introducir nro de filas y columnas: ";
					cin>>n;
					m=n;
					cargar(matriz1,n,m);
					mostrar(matriz1,n,m);
					if(cuadradomagico(matriz1,n)==true){
					cout<<endl<<"La matriz es magica";
					}
					else{
					cout<<endl<<"La matriz NO es magica";
					}
					getch();
					break;
			case 6:	cout<<"Introducir nro de filas y columnas: ";
					cin>>n;
					m=n;
					caracol(matriz1,n);
					mostrar(matriz1,n,m);
					getch();
					break;

		}
	}while(opcion !=0);
	getch();
	return(1);
}

Secuencias – Series – Sucesiones
#include<iostream>
#include<conio.h>
#include<math.h>
#define fil 10
#define col 10
usingnamespace std;

void cargarVec(int n, int vec1[]){
	int i;
	for(i=0; i<n; i++){
		cout<<"Introduzca elemento "<<i+1<<": ";
		cin>>vec1[i];
	}
}

void funcion1(int n, int vec1[]){
	int i,Num=3;

	for(i=0;i<n;i++){
		Num=Num+3;
		vec1[i]=Num;
	}
}

int invertirNum(int Num){
	int inv=0;
		while (Num != 0){
			inv = inv * 10;
			inv = inv + Num % 10;
			Num = Num / 10;
	}
	return(inv);
}

void funcion2(int n, int vec1[]){
	int i,Num,c=1;

	for(i=0;i<n;i++){
		Num=powf(c,2);
		c++;
		Num=invertirNum(Num);
		vec1[i]=Num;
	}
}

int sumaDig(int n){
	int d,s=0;

	while(n>0){
		d=n%10;
		n=n/10;
		s=s+d;
	}
	return(s);
}

void funcion3(int n, int vec1[]){
	int d=1, i,Num=0;

	for(i=0;i<n;i++){
		Num=Num+d;
		d=sumaDig(Num);
		vec1[i]=Num;
	}
}

void funcion4(int n, int vec1[]){
	int d=1, i,Num=0;

	for(i=0;i<n;i++){
		Num=Num+d;
		d=sumaDig(Num);
		vec1[i]=d;
	}
}

void cargar(int mat[fil][col], int nfil, int ncol, int vec[]){
	int i, j, k=0;
	for(i=0;i<nfil;i++){
for(j=0;j<ncol;j++){
            mat[i][j]=vec[k];
			k++;
		}
	}
}

void mostrar(int mat[fil][col], int nfil, int ncol){
int i, j;
	cout<<endl;
for(i=0;i<nfil;i++){
for(j=0;j<ncol;j++){
            cout<<mat[i][j]<<" ";
        }
    cout<<endl;
    }
} 

int main(){
	int opcion,z;
	int matriz1[fil][col], n, m,vec[50];

		do{
		system("cls");
		cout<<"Introducir nro de filas: ";
		cin>>n;
		cout<<"Introducir nro de columnas: ";
		cin>>m;
		cout<<endl;
		z=n*m;

		cout<<"******* M E N U *********";
		cout<<endl<<"1.- Cargar con secuencia 1";
		cout<<endl<<"2.- Cargar con secuencia 2";
		cout<<endl<<"3.- Cargar con secuencia 3";
		cout<<endl<<"4.- Cargar con secuencia 4";
		cout<<endl<<"0.- Salir";
		cout<<endl<<"Seleccionar opcion: ";
		cin >> opcion;
		getchar();
		switch(opcion){
			case 1:	funcion1(z,vec);
					cargar(matriz1,n,m,vec);
					mostrar(matriz1,n,m);
					getch();
					break;
			case 2: funcion2(z,vec);
					cargar(matriz1,n,m,vec);
					mostrar(matriz1,n,m);
					getch();
					break;
			case 3: funcion3(z,vec);
					cargar(matriz1,n,m,vec);
					mostrar(matriz1,n,m);
					getch();
					break;
			case 4: funcion4(z,vec);
					cargar(matriz1,n,m,vec);
					mostrar(matriz1,n,m);
					getch();
					break;
		}
	}while(opcion !=0);
	getch();
	return(1);
}

Array de arrays
#include<iostream>
#include<conio.h>
#include<time.h>
#include<string.h>
#include<ctype.h>
#define fil 10
#define col 10
usingnamespace std;

struct palabra
{char cad[30];
};

struct vec
{palabra v[30];
};

struct telemento
{int mat[fil][col];
};

void ingresar_cadenas(vec v[], int n)
{int i,j;
	for(i=0;i<n;i++)
		{for(j=0;j<n;j++)
			{cout<<"Ingrese palabra: ";
			cin>>v[i].v[j].cad;
			}
		}
}

void mostrar (vec v[], int n)
{int i,j;
cout<<endl<<"Vector: "<<endl;
	for(i=0;i<n;i++)
		{for(j=0;j<n;j++)
			{cout<<v[i].v[j].cad;
			cout<<" ";
			}
		cout<<endl;
		}
}

void bolivia (vec M[fil][col], int n, vec v[])
{int i,j,k=0,l, tam;
char aux[30];
	for(i=0;i<n;i++)
			{for(j=0;j<n;j++)
			{tam= strlen(v[i].v[j].cad);
				for(k=0;k<tam;k++)
					{strcpy(aux,v[i].v[j].cad);
					}aux[tam]='\0';
				for(l=0;l<n;l++)
					{strcpy(M[i][j].v[l].cad,aux);
					}
			}
		}
}

void mostrar2(vec M[fil][col], int n, vec v[])
{int i,j,l;
	cout<<endl<<"Matriz: "<<endl;
	for(i=0;i<n;i++)
		{for(j=0;j<n;j++)
			{for(l=0;l<n;l++)
				{cout<<M[i][j].v[l].cad;
				cout<<" ";
			}
		}
	cout<<endl;
	}
}

void llenar_auto(telemento M[fil][col], int n)
{int i,j,k,l;
srand(time(NULL));
	for(i=0;i<n;i++)
		{for(j=0;j<n;j++)
			{for(k=0;k<n;k++)
				{for(l=0;l<n;l++)
					{M[i][j].mat[k][l]=rand() %10;
					}
				}
			}
	}
}

void mostrar2 (telemento M[fil][col], int n)
{int i, j,k,l;
	for(i=0;i<n;i++)
		{for(j=0;j<n;j++)
			{for(k=0;k<n;k++)
				{for(l=0;l<n;l++)
					{cout<<M[i][j].mat[k][l]<<" ";
					}cout<<" ";
				}cout<<endl;
			}cout<<endl;
		}cout<<endl;
}


void cambio_dp(int M[fil][col], int n)
{int i, aux;
	for(i=0;i<n/2;i++)
		{aux= M[i][i];
		M[i][i]= M[n-1-i][n-1-i];
		M[n-1-i][n-1-i]= aux;
		}
}

void cambio_ds(int M[fil][col], int n)
{int i, aux;
	for(i=0;i<n/2;i++)
		{aux=M[i][n-1-i];
		M[i][n-1-i]=M[n-1-i][i];
		M[n-1-i][i]=aux;
		}
}

void cambio (int A[fil][col], int n, int B[fil][col])
{int i, j, aux;
	for(i=0;i<n/2;i++)
		{for(j=0;j<n/2;j++)
			{aux=A[i][j];
			A[i][j]=B[i][j];
			B[i][j]=aux;
			}
		}
}

void intercambio(telemento M[fil][col], int n)
{int i, j;
	for(i=0;i<n/2;i++)
		{cambio(M[i][i].mat,n, M[n-1-i][n-1-i].mat);
			}for(i=0;i<n/2;i++)
				{cambio(M[n-1-i][i].mat,n, M[i][n-1-i].mat);
				}
			for(i=0;i<n/2;i++)
			{cambio_dp(M[i][i].mat,n);
			cambio_ds(M[	n-i-1][i].mat,n);
			}
}

void mostrar(telemento M[fil][col], int n)
{int i, j,k,l;
	for(i=0;i<n;i++)
		{for(j=0;j<n;j++)
			{for(k=0;k<n;k++)
				{for(l=0;l<n;l++)
					{cout<<M[i][j].mat[k][l]<<" ";
					}cout<<" ";
				}cout<<endl;
			}cout<<endl;
		}cout<<endl;
}


int main(){
	int opcion, n;
	palabra V[30];
	vec v[30];
	vec M[fil][col];
	telemento Mat[fil][col];

		do{
		system("cls");
		cout<<"******* M E N U *********";
		cout<<endl<<"1.- Ejercicio 12";
		cout<<endl<<"2.- Ejercicio 13";
		cout<<endl<<"0.- Salir";
		cout<<endl<<"Seleccionar opcion: ";
		cin >> opcion;
		switch(opcion){
			case 1: cout<<"Ingrese cantidad de filas=columnas: ";
					cin>>n;
					ingresar_cadenas(v,n);
					mostrar(v,n);
					bolivia(M,n,v);
					mostrar2(M,n,v);
					getch();
					break;
			case 2: cout<<"Ingrese cantidad de filas=columnas: ";
					cin>>n;
					cout<<endl;
					llenar_auto(Mat,n);
					mostrar2(Mat,n);
					intercambio(Mat,n);
					mostrar(Mat,n);
					getch();
					break;
		}
		}while(opcion !=0);
	getch();
	return(1);
}



#include"stdafx.h"
#include<iostream>

#include<conio.h>



usingnamespace std;



#define FIL 20

#define COL 20





struct tipoX

{int mat[FIL][COL];

};



void cargar(tipoX matriz[FIL][COL], int n)

{int i,j,k,p,c=1;

for(i=0;i<n;i++)

       {for(j=0;j<n;j++)

             {for(k=0;k<n;k++)

                    {for(p=0;p<n;p++)

                           {matriz[i][j].mat[k][p]=c;

                           c++;

                           }

                    }

             }

       }

}



void mostrar(tipoX  matriz[FIL][COL], int n)

{int i,j,k,p;

cout<<endl<<"la matriz de matrices es: "<<endl;

for(i=0;i<n;i++)

       {for(j=0;j<n;j++)

             {for(k=0;k<n;k++)

                    {for(p=0;p<n;p++)

                           {cout<<matriz[i][k].mat[j][p]<<" ";

                           }

                    cout<<"\t";

                    }



             cout<<endl;

             }

       cout<<endl;

       }

}





void intercambiodemat(int A[FIL][COL], int B[FIL][COL], int n)

{int i, j, aux;

for(i=0;i<n;i++)

       {for(j=0;j<n;j++)

             {aux=A[i][j];

             A[i][j]=B[i][j];

             B[i][j]=aux;

             }

       }

}





void cambioDP(int mat[FIL][COL], int n)

{int i, aux;

for(i=0;i<n/2;i++)

       {aux=mat[i][i];

       mat[i][i]=mat[n-1-i][n-1-i];

       mat[n-1-i][n-1-i]=aux;

       }

}





void cambioDS(int mat[FIL][COL], int n)

{int i,j=n-1, aux;

for(i=0;i<n/2;i++)

       {aux=mat[i][j];

       mat[i][j]=mat[j][i];

       mat[j][i]=aux;

       }

}


void matrizdematrices(tipoX matriz[FIL][COL], int n)

{int i,j=n-1;

for(i=0;i<n/2;i++)

       {intercambiodemat(matriz[i][i].mat,matriz[j][j].mat,n);

       intercambiodemat(matriz[i][j].mat,matriz[j][i].mat,n);

       j--;

       }

j=n-1;

for(i=0;i<n;i++)

       {cambioDP(matriz[i][i].mat,n);

       cambioDS(matriz[i][j].mat,n);

       j--;

       }

}


int main()

{int n;

tipoX matriz[FIL][COL];

cout<<"ingrese el tamańo de la matriz de matices: ";

cin>>n;

cargar(matriz,n);

mostrar(matriz,n);

matrizdematrices(matriz,n);

mostrar(matriz,n);

getch();

return(1);

}


